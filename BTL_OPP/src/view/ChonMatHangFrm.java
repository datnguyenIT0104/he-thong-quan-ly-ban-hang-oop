/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import dao.MatHangDAO;
import dao.ViecMuaHangDAO;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import model.HoaDon;
import model.MatHang;
import model.ViecMuaHang;

/**
 *
 * @author DatIT
 */
public class ChonMatHangFrm extends javax.swing.JFrame {
    private DefaultTableModel model;
    private ArrayList<MatHang> list;
    private HoaDon hd;
    /**
     * Creates new form ChonMatHangFrm
     */
    public ChonMatHangFrm() {
        initComponents();
        initTable();
        setLocationRelativeTo(null);
    }

    public ChonMatHangFrm(HoaDon hd) {
        initComponents();
        this.hd = hd;
        initTable();
        setLocationRelativeTo(null);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblMatHang = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtTuKhoa = new javax.swing.JTextField();
        btnTim = new javax.swing.JButton();
        btnTatCaMatHang = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Chọn Mặt Hàng");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(51, 0, 255));
        jLabel1.setText("PHẦN MỀM QUẢN LÝ BÁN HÀNG");

        tblMatHang.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tblMatHang.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblMatHangMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tblMatHang);

        jLabel2.setText("Từ khóa:");

        btnTim.setText("Tìm");
        btnTim.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTimActionPerformed(evt);
            }
        });

        btnTatCaMatHang.setText("Tất Cả Mặt Hàng");
        btnTatCaMatHang.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTatCaMatHangActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(140, 140, 140))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 551, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtTuKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(47, 47, 47)
                        .addComponent(btnTim, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnTatCaMatHang)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtTuKhoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnTim)
                    .addComponent(btnTatCaMatHang))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 29, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 277, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTimActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTimActionPerformed
        if( txtTuKhoa.getText().equals("")){
            JOptionPane.showMessageDialog(this, "Không được để trống số lượng", "Lỗi", JOptionPane.ERROR_MESSAGE);
            return;
        }
        model.setRowCount(0);
        String tuK = txtTuKhoa.getText();
        int index = 1;
        for (MatHang matHang : list) {
            if( matHang.getTen().indexOf(tuK) != -1){
                model.addRow(  new Object[]{ index++, matHang.getId(), matHang.getTen(), matHang.getDonGia(),
            matHang.getGhiChu()});
            }
        }
        model.fireTableDataChanged();
    }//GEN-LAST:event_btnTimActionPerformed

    private void tblMatHangMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblMatHangMouseClicked
        int selected = tblMatHang.getSelectedRow();
        
        MatHang mhFound = null;
        
        if( selected >= 0){
            // lấy mặt hàng
            int idMH = (int) tblMatHang.getValueAt(selected, 1);
            
            for (MatHang matHang : list) {
                if( matHang.getId() == idMH){
                    mhFound = matHang;
                    break;
                }
            }
            // lấy số lượng
            int soLuong = 0;
            while(true){
                String s = JOptionPane.showInputDialog(this, "Nhập vào số lượng mặt hàng(lớn hơn 0): ", "Nhập",
                        JOptionPane.QUESTION_MESSAGE);
                
                if( s == null) break;
                if( s.equals("")){
                    JOptionPane.showMessageDialog(this, "Không được để trống số lượng", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    continue;
                }
                try {
                    soLuong = Integer.parseInt(s);
                    
                    if( soLuong <= 0){
                        JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn không", "Lỗi", JOptionPane.ERROR_MESSAGE);
                        continue;
                    }
                    break;
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(this, "Nhập không đúng định dạng", "Lỗi", JOptionPane.ERROR_MESSAGE);
                    System.out.println(e.getMessage());
                    
                }
            }
            
            if( soLuong != 0){
                // đóng gói dữ liệu
                ViecMuaHang vmh = new ViecMuaHang();
                vmh.setSoLuong(soLuong);
                vmh.setMatHang( mhFound);
                vmh.setThanhTien( soLuong*mhFound.getDonGia()*( 1 - hd.getKhuyenMai()));
                
                // kiem tra xem da co hay chua
                //   neu co thi tang so luong
                boolean daCo = false;
                for (ViecMuaHang viecMuaHang : hd.getListVMH()) {
                    if( viecMuaHang.getMatHang().getId() == mhFound.getId()){
                        viecMuaHang.setSoLuong(vmh.getSoLuong() + viecMuaHang.getSoLuong());
                        viecMuaHang.setThanhTien( viecMuaHang.getThanhTien() + vmh.getThanhTien());
                        daCo = true;
                        break;
                    }
                }
//                // them viecMuaHang vao CSDL
//                ViecMuaHangDAO vmhD = new ViecMuaHangDAO();
//                vmhD.themViecMuaHang(vmh, hd);
                
                // thêm vào đối tượng hóa đơn nếu mặt hàng chưa có trong danh sách
                if( !daCo) hd.getListVMH().add(vmh);
                
                // trở về Danh Sách Mua Hàng
                ( new DanhSachMuaHangFrm(hd)).setVisible(true);
                this.dispose();
            }else return;
        }
    }//GEN-LAST:event_tblMatHangMouseClicked

    private void btnTatCaMatHangActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTatCaMatHangActionPerformed
        model.setRowCount(0);
        int index = 1;
        for (MatHang matHang : list) {
            model.addRow(  new Object[]{ index++, matHang.getId(), matHang.getTen(), matHang.getDonGia(),
            matHang.getGhiChu()});
        }
        model.fireTableDataChanged();
    }//GEN-LAST:event_btnTatCaMatHangActionPerformed
    
    
    private void initTable(){
        // khỏi tạo bảng
        model = new DefaultTableModel();
        String[] Colums = new String[]{"STT", "Mã Mặt Hàng", "Tên", "Đơn Giá", "Ghi Chú"};
        model.setColumnIdentifiers(Colums);
        // lấy danh sách mặt hàng
        list = new ArrayList<>();
        MatHangDAO mhD = new MatHangDAO();
        list = mhD.layTatCaMatHang();
        
        int index = 1;
        for (MatHang matHang : list) {
            model.addRow( new Object[]{ index++, matHang.getId(), matHang.getTen(), matHang.getDonGia(),
            matHang.getGhiChu()});
        }
        tblMatHang.setModel(model);
    }
    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnTatCaMatHang;
    private javax.swing.JButton btnTim;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTable tblMatHang;
    private javax.swing.JTextField txtTuKhoa;
    // End of variables declaration//GEN-END:variables
}
